-- sync_VGA_visualTest.vhd

-- created by  :  Meher Krishna Patel
-- date        :  24-Dec-16

-- Functionality:
  -- synchronize the VGA system

-- ports:
   -- vga_clk : 25 MHz clock for VGA operation (generated by sync_VGA.vhd file)
   -- video_on : send video_on = '0' while synchronization ohtherwise '1' to display data
   -- hsync and vsync : synchronization signals required for VGA operation
   -- pixel_x and pixel_y : 10 bit pixel location
   
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity sync_VGA is
   port(
      clk, reset: in std_logic;
      hsync, vsync: out std_logic;
      video_on, vga_clk: out std_logic;
      pixel_x, pixel_y: out std_logic_vector (9 downto 0)
    );
end sync_VGA;

architecture arch of sync_VGA is    
   -- VGA 640-by-480 
   constant HD: integer:=640; -- horizontal display area
   constant VD: integer:=480; -- vertical display area

   -- Horizontal and Vertical retraces
   constant HR: integer:=100; -- horizontal retrace
   constant VR: integer:=10;  -- vertical retrace

   -- 25 MHz VGA clock 
   signal vga_tick: std_logic;
      
   -- pixel location
   signal h_pixel, h_pixel_next: unsigned(9 downto 0);
   signal v_pixel, v_pixel_next: unsigned(9 downto 0);

   -- store location of screen-ends for retracing operation
   signal h_end, v_end: std_logic;
begin

   -- 25 MHz clock for VGA operations
   clock_25MHz: entity work.clockTick
   generic map (M=>2, N=>2)
   port map (clk=>clk, reset=>reset, 
               clkPulse=>vga_tick);
         
   -- reset pixel location
   process (clk,reset)
   begin
      if reset='1' then
         v_pixel <= (others=>'0');
         h_pixel <= (others=>'0');
      elsif (clk'event and clk='1') then
         v_pixel <= v_pixel_next;
         h_pixel <= h_pixel_next;
      end if;
   end process;

   -- video on/off
   process(clk, h_pixel, v_pixel)
   begin
      if (h_pixel < HD and v_pixel < VD) then 
         video_on <= '1';
      else
         video_on <='0';
      end if;
   end process;

   -- end points for retrace
   h_end <= '1' when h_pixel=(HD+HR-1) else
            '0';
   v_end <= '1' when v_pixel=(VD+VR-1) else
            '0';
      
   -- set h_pixel_next to zero when end of horizontal-screen reached
   -- otherwise increment on vga_tick
   process (vga_tick, h_pixel, h_end)
   begin
      if vga_tick='1' then
         if h_end='1' then
            h_pixel_next <= (others=>'0');
         else
            h_pixel_next <= h_pixel + 1;
         end if;
      else
         h_pixel_next <= h_pixel;
      end if;
   end process;
      
   -- set v_pixel_next to zero when end of horizontal and vertical screen reached
   -- otherwise increment on vga_tick
   process (vga_tick, v_pixel, h_end, v_end)
   begin
      if vga_tick='1' and h_end='1' then
         if (v_end='1') then
            v_pixel_next <= (others=>'0');
         else
            v_pixel_next <= v_pixel + 1;
         end if;
      else
         v_pixel_next <= v_pixel;
      end if;
   end process;

   -- horizontal and vertical sync signals
   hsync <=
      '1' when (h_pixel>=(HD)) 
           and (h_pixel<=(HD+HR-1)) else 
      '0';
   vsync <=
      '1' when (v_pixel>=(VD))
           and (v_pixel<=(VD+VR-1)) else
      '0';

   -- convert unsigned-pixel-locations to std_logic_vector format
   pixel_x <= std_logic_vector(h_pixel);
   pixel_y <= std_logic_vector(v_pixel);

   -- send clock to output port
   vga_clk <= vga_tick;
end arch;
